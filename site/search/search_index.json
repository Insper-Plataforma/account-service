{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Account Service","text":"<p>Este microsservi\u00e7o \u00e9 respons\u00e1vel por gerenciar contas de usu\u00e1rio, incluindo:</p> <ul> <li>Cria\u00e7\u00e3o de contas</li> <li>Autentica\u00e7\u00e3o por email e senha (com hash SHA-256)</li> <li>Listagem e consulta de contas</li> </ul> <p>O servi\u00e7o \u00e9 parte de uma arquitetura de microsservi\u00e7os, utilizando Spring Boot, PostgreSQL e Flyway.</p>"},{"location":"#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Cria\u00e7\u00e3o de Conta: Permite que novos usu\u00e1rios se registrem no sistema.</li> <li>Listagem de Contas: Permite visualizar todas as contas registradas.</li> <li>Consulta de Conta: Permite visualizar detalhes de uma conta espec\u00edfica pelo e-mail e senha.</li> <li>Whoami: Permite identificar a conta logada.</li> </ul>"},{"location":"#integracao-com-jenkins","title":"Integra\u00e7\u00e3o com Jenkins","text":"<p>Este projeto conta com um arquivo Jenkinsfile (na raiz do reposit\u00f3rio) que define uma pipeline de integra\u00e7\u00e3o cont\u00ednua para compilar automaticamente o m\u00f3dulo sempre que houver altera\u00e7\u00f5es no reposit\u00f3rio.</p>"},{"location":"#para-que-serve","title":"Para que serve?","text":"<ul> <li> <p>Compila\u00e7\u00e3o automatizada: toda altera\u00e7\u00e3o no reposit\u00f3rio dispara o build do Maven, detectando problemas de compila\u00e7\u00e3o antes do merge.</p> </li> <li> <p>Imagens Docker consistentes: gera e publica automaticamente imagens multiplataforma, facilitando o deploy em diferentes ambientes (x86_64 e ARM).</p> </li> <li> <p>Seguran\u00e7a das credenciais: utiliza credenciais armazenadas no Jenkins (identificador dockerhub-credential), evitando exposi\u00e7\u00e3o de senhas no c\u00f3digo.</p> </li> </ul> <p>Dessa forma, a integra\u00e7\u00e3o com Jenkins garante que o account-service esteja sempre compilando e empacotado corretamente, com uma imagem Docker pronta para ser implantada nos clusters de produ\u00e7\u00e3o ou QA.</p>"},{"location":"arquitetura/","title":"Arquitetura","text":""},{"location":"arquitetura/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>src/main/java/store/account/\n\u2502 \u251c\u2500\u2500 Account.java # Entidade de dom\u00ednio\n\u2502 \u251c\u2500\u2500 AccountModel.java # Entidade JPA\n\u2502 \u251c\u2500\u2500 AccountParser.java # Convers\u00e3o entre modelos e DTOs\n\u2502 \u251c\u2500\u2500 AccountRepository.java # Interface de persist\u00eancia\n\u2502 \u251c\u2500\u2500 AccountService.java # L\u00f3gica de neg\u00f3cio\n\u2502 \u2514\u2500\u2500 AccountResource.java # Controller REST\n\u2514\u2500\u2500 resources/\n\u2502 \u251c\u2500\u2500 application.yaml # Configura\u00e7\u00f5es de ambiente\n\u2502 \u2514\u2500\u2500 db/migration/ # Scripts Flyway\n</code></pre>"},{"location":"endpoints/","title":"Endpoints da API","text":"<p>Base URL: <code>/account</code></p>"},{"location":"endpoints/#post-account","title":"POST <code>/account</code>","text":"<p>Cria uma nova conta.</p>"},{"location":"endpoints/#request-body-json","title":"Request Body (JSON)","text":"<pre><code>{\n  \"name\": \"Ana Helena\",\n  \"email\": \"ana@exemplo.com\",\n  \"password\": \"12345678\"\n}\n</code></pre>"},{"location":"endpoints/#response-201-created","title":"Response (201 Created)","text":"<pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"Ana Helena\",\n  \"email\": \"ana@exemplo.com\"\n}\n</code></pre>"},{"location":"endpoints/#get-account","title":"GET <code>/account</code>","text":"<p>Lista todas as contas registradas.</p>"},{"location":"endpoints/#response-200-ok","title":"Response (200 OK)","text":"<pre><code>[\n  {\n    \"id\": \"uuid\",\n    \"name\": \"Ana Helena\",\n    \"email\": \"ana@exemplo.com\"\n    }\n]\n</code></pre>"},{"location":"endpoints/#post-accountauth","title":"POST <code>/account/auth</code>","text":"<p>Autentica o usu\u00e1rio com email e senha.</p>"},{"location":"endpoints/#request-body-json_1","title":"Request Body (JSON)","text":"<pre><code>{\n  \"email\": \"ana@exemplo.com\",\n  \"password\": \"12345678\"\n}\n</code></pre>"},{"location":"endpoints/#response-200-ok_1","title":"Response (200 OK)","text":"<pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"Ana Helena\",\n  \"email\": \"ana@exemplo.com\"\n}\n</code></pre>"},{"location":"endpoints/#get-accountid","title":"GET <code>/account/{id}</code>","text":"<p>Retorna informa\u00e7\u00f5es da conta autenticada (whoami).</p>"},{"location":"endpoints/#path-param","title":"Path Param","text":"<ul> <li><code>id</code> (string): ID da conta.</li> </ul>"},{"location":"endpoints/#response-200-ok_2","title":"Response (200 OK)","text":"<pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"Ana Helena\",\n  \"email\": \"ana@exemplo.com\"\n}\n</code></pre>"},{"location":"entidades/","title":"Entidades","text":""},{"location":"entidades/#account","title":"Account","text":"<p>Representa a conta do usu\u00e1rio no dom\u00ednio da aplica\u00e7\u00e3o.</p> <p>Campos:</p> <ul> <li><code>id</code>: identificador \u00fanico</li> <li><code>name</code>: nome do usu\u00e1rio</li> <li><code>email</code>: email de login</li> <li><code>password</code>: senha (em texto puro, usado apenas na cria\u00e7\u00e3o)</li> <li><code>sha256</code>: senha criptografada</li> <li><code>birthdate</code>: data de nascimento</li> <li><code>creation</code>: data de cria\u00e7\u00e3o da conta</li> </ul>"},{"location":"entidades/#accountmodel","title":"AccountModel","text":"<p>Entidade JPA que representa a tabela <code>account</code> no banco.</p> <ul> <li><code>@Entity</code></li> <li>Campos mapeados com <code>@Column</code>, como <code>tx_name</code>, <code>tx_email</code>, etc.</li> </ul>"},{"location":"entidades/#accountparser","title":"AccountParser","text":"<p>Classe utilit\u00e1ria para convers\u00e3o:</p> <ul> <li><code>AccountIn</code> \u2192 <code>Account</code> (entrada)</li> <li><code>Account</code> \u2192 <code>AccountOut</code> (resposta)</li> </ul>"},{"location":"entidades/#accountrepository","title":"AccountRepository","text":"<p>Interface que estende <code>CrudRepository</code>.</p> <p>M\u00e9todos:</p> <ul> <li><code>findByEmailAndSha256(email, sha256)</code></li> </ul>"},{"location":"entidades/#accountservice","title":"AccountService","text":"<p>Cont\u00e9m toda a l\u00f3gica de neg\u00f3cios:</p> <ul> <li>Valida\u00e7\u00e3o de senha</li> <li>Hash com SHA-256</li> <li>Intera\u00e7\u00f5es com o reposit\u00f3rio</li> <li>Convers\u00e3o entre entidades e modelos</li> </ul>"},{"location":"entidades/#accountresource","title":"AccountResource","text":"<p>Controller REST com endpoints:</p> <ul> <li>Cria\u00e7\u00e3o, autentica\u00e7\u00e3o, listagem e <code>whoami</code></li> </ul>"},{"location":"seguranca/","title":"Seguran\u00e7a","text":""},{"location":"seguranca/#armazenamento-de-senha","title":"Armazenamento de Senha","text":"<p>O sistema n\u00e3o armazena senhas em texto puro. Ao criar ou autenticar uma conta:</p> <ol> <li>A senha fornecida \u00e9 transformada via <code>SHA-256</code></li> <li>O hash \u00e9 codificado em Base64</li> <li>O resultado \u00e9 armazenado na coluna <code>tx_sha256</code> do banco</li> </ol> <p>Exemplo de m\u00e9todo:</p> <pre><code>private String calcHash(String value) {\n    MessageDigest digester = MessageDigest.getInstance(\"SHA-256\");\n    byte[] hash = digester.digest(value.getBytes(StandardCharsets.UTF_8));\n    return Base64.getEncoder().encodeToString(hash);\n}\n</code></pre>"},{"location":"seguranca/#validacao","title":"Valida\u00e7\u00e3o","text":"<ul> <li>Senhas com menos de 8 caracteres s\u00e3o rejeitadas com erro HTTP 400.</li> <li>A autentica\u00e7\u00e3o s\u00f3 ocorre se email e senha gerarem o mesmo hash salvo.</li> </ul>"},{"location":"setup/","title":"Setup e Depend\u00eancias - Account Service","text":"<p>Este servi\u00e7o \u00e9 respons\u00e1vel pela cria\u00e7\u00e3o e autentica\u00e7\u00e3o de contas. Ele funciona como um microsservi\u00e7o persistente com banco de dados e versionamento via Flyway.</p>"},{"location":"setup/#requisitos","title":"Requisitos","text":"<ul> <li>Java 17+</li> <li>Spring Boot</li> <li>PostgreSQL</li> <li>Flyway</li> </ul>"},{"location":"setup/#dependencias-pomxml","title":"Depend\u00eancias (pom.xml)","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n    &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"setup/#como-compilar","title":"Como compilar","text":"<pre><code>mvn clean package\n</code></pre>"}]}